// <auto-generated/>
#nullable enable

using System.Net.WebSockets;
using System.Text;
using System.Text.Json;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;

namespace Fireflies.GraphQL.Demos.GraphQL.GraphQLDemo;


public class IBookWhere {
	public IntWhere BookId { get; set; }
	public StringWhere ISBN { get; set; }
	public StringWhere Title { get; set; }
}

public class IntWhere {
	public int? GreaterThan { get; set; }
	public int? GreaterThanOrEq { get; set; }
	public int? LessThan { get; set; }
	public int? LessThanOrEq { get; set; }
	public int? Equal { get; set; }
	public int? NotEqual { get; set; }
}

public class StringWhere {
	public string? Contains { get; set; }
	public string? DoesntContain { get; set; }
	public string? StartsWith { get; set; }
	public string? DoesntStartWith { get; set; }
	public string? EndsWith { get; set; }
	public string? DoesntEndWith { get; set; }
	public string? Equal { get; set; }
	public string? NotEqual { get; set; }
}

public class IBookSort {
	public SortOrder? BookId { get; set; }
	public SortOrder? ISBN { get; set; }
	public SortOrder? Title { get; set; }
}

public enum SortOrder {
	ASC,
	DESC,
}

public class EditionSort {
	public SortOrder? Name { get; set; }
	public SortOrder? Released { get; set; }
}

public class AddBookInput {
	public string? Title { get; set; }
}

public class BlogWhere {
	public IntWhere BlogId { get; set; }
	public StringWhere Url { get; set; }
}

public class BlogSort {
	public SortOrder? BlogId { get; set; }
	public SortOrder? Url { get; set; }
}

public class AuthorsFilter {
	public string? Contains { get; set; }
	public Lifecycle Lifecycle { get; set; }
}

public enum Lifecycle {
	Unknown,
	InProduction,
	Ended,
}

public interface IGraphQLDemoClient {
	Task<IGetBooksResult> GetBooks();
	Task<IGetBookResult> GetBook(int bookId);
	Task<IAddBookResult> AddBook(string? title);
	GraphQLSubscriber<IBookUpdatedResult> BookUpdated(int bookId);
}

public class GraphQLDemoClient : IGraphQLDemoClient {
	private Action<HttpBuilder>? _httpConfigurator;
	private Action<WebSocketBuilder>? _webSocketConfigurator;
	private GraphQLWsClient _wsClient;
	private JsonSerializerOptions _serializerSettings = new JsonSerializerOptions { PropertyNameCaseInsensitive = true, Converters = { new JsonStringEnumConverter() } };

	private static readonly HttpClientHandler _httpHandler = new();

	public event Action Connecting { add { _wsClient.Connecting += value; } remove { _wsClient.Connecting -= value; } }
	public event Action Connected { add { _wsClient.Connected += value; } remove { _wsClient.Connected -= value; } }
	public event Action Disconnected { add { _wsClient.Disconnected += value; } remove { _wsClient.Disconnected -= value; } }
	public event Action Reconnecting { add { _wsClient.Reconnecting += value; } remove { _wsClient.Reconnecting -= value; } }
	public event Action<Exception> Exception { add { _wsClient.Exception += value; } remove { _wsClient.Exception -= value; } }

	public GraphQLDemoClient(Action<HttpBuilder> httpConfigurator, Action<WebSocketBuilder> webSocketConfigurator) {
		_httpConfigurator = httpConfigurator;
		_webSocketConfigurator = webSocketConfigurator;
		CreateWsClient();
	}

	public GraphQLDemoClient(GraphQLDemoClientConfig config) {
		_httpConfigurator = config.ConfigureHttp;
		_webSocketConfigurator = config.ConfigureWebSocket;
		CreateWsClient();
	}

	private void CreateWsClient() {
		if(_webSocketConfigurator == null)
			throw new ArgumentException($"{nameof(_webSocketConfigurator)} is null", nameof(_webSocketConfigurator));

		var wsClient = new GraphQLWsClient();
		_webSocketConfigurator(new WebSocketBuilder(wsClient));

		if(wsClient.Uri == null)
			throw new ArgumentException($"{nameof(wsClient.Uri)} is null", nameof(wsClient.Uri));

		_wsClient = wsClient;
	}

	public async Task<IGetBooksResult> GetBooks() {
		var request = new JsonObject();
		request["query"] = @"query GetBooks {
  books {
    ...TitleFragment
    __typename
  }
}
fragment TitleFragment on IBook {
  title
  ... on InventoryBook {
    calculatedPrice
    editions {
      name
      released
      __typename
    }
  }
}";

		var json = await Execute(request);
		return new GetBooksResult(json, _serializerSettings);
	}

	public async Task<IGetBookResult> GetBook(int bookId) {
		var request = new JsonObject();
		request["query"] = @"query GetBook($bookId: Int!) {
  getBook(bookId: $bookId) {
    ...TitleFragment
    __typename
  }
}
fragment TitleFragment on IBook {
  title
  ... on InventoryBook {
    calculatedPrice
    editions {
      name
      released
      __typename
    }
  }
}";

		var variables = new JsonObject();
		request["variables"] = variables;
		variables["bookId"] = JsonSerializer.SerializeToNode(bookId, _serializerSettings);

		var json = await Execute(request);
		return new GetBookResult(json, _serializerSettings);
	}

	public async Task<IAddBookResult> AddBook(string? title) {
		var request = new JsonObject();
		request["query"] = @"mutation AddBook($title: String) {
  addBook(data: {title: $title}) {
    bookId
    ...TitleFragment
    __typename
  }
}
fragment TitleFragment on IBook {
  title
  ... on InventoryBook {
    calculatedPrice
    editions {
      name
      released
      __typename
    }
  }
}";

		var variables = new JsonObject();
		request["variables"] = variables;
		variables["title"] = JsonSerializer.SerializeToNode(title, _serializerSettings);

		var json = await Execute(request);
		return new AddBookResult(json, _serializerSettings);
	}

	public GraphQLSubscriber<IBookUpdatedResult> BookUpdated(int bookId) {
		var request = new JsonObject();
		request["query"] = @"subscription BookUpdated($bookId: Int!) {
  bookUpdated(bookId: $bookId) {
    title
    bookId
    __typename
  }
}";

		var variables = new JsonObject();
		request["variables"] = variables;
		variables["bookId"] = JsonSerializer.SerializeToNode(bookId, _serializerSettings);

		return _wsClient.CreateSubscriber<IBookUpdatedResult>(request, payload => new BookUpdatedResult(payload, _serializerSettings));
	}

	private async Task<JsonNode> Execute(JsonObject request) {
		var content = new StringContent(request.ToJsonString(), Encoding.UTF8, "text/text");
		var client = new HttpClient(_httpHandler);

		if(_httpConfigurator == null)
			throw new ArgumentException($"{nameof(_httpConfigurator)} is null", nameof(_httpConfigurator));

		_httpConfigurator(new HttpBuilder(client));

		if(client.BaseAddress == null)
			throw new ArgumentException($"{nameof(client.BaseAddress)} is null", nameof(client.BaseAddress));

		var result = await client.PostAsync("", content);
		result.EnsureSuccessStatusCode();
		return (await JsonSerializer.DeserializeAsync<JsonNode>(await result.Content.ReadAsStreamAsync().ConfigureAwait(false)))!;
	}
}

public interface IGetBooksResult : IOperationResult<IGetBooksData> {
}

public class GetBooksResult : IGetBooksResult {
	public IEnumerable<IClientError> Errors { get; }
	public IGetBooksData Data { get; }

	public GetBooksResult(JsonNode? data, JsonSerializerOptions serializerOptions) {
		Errors = data?["errors"]?.Deserialize<IEnumerable<ClientError>>(serializerOptions)?.ToArray() ?? new IClientError[0];
		Data = CreateData(data?["data"], serializerOptions);
	}

	private IGetBooksData? CreateData(JsonNode? data, JsonSerializerOptions serializerOptions) {
		if(data == null)
			return null;
		return new GetBooksData(data!, serializerOptions);
	}
}


public interface IGetBooksData {
	IGetBooksData_Books[] Books { get; }
}

public class GetBooksData : IGetBooksData {
	public IGetBooksData_Books[] Books { get; }

	public GetBooksData(JsonNode data, JsonSerializerOptions serializerOptions) {
		Books = (data["books"] != null ? data["books"]!.AsArray().Select(x => CreateBooks(x, serializerOptions)).ToArray() : null)!;
	}

	private IGetBooksData_Books? CreateBooks(JsonNode? data, JsonSerializerOptions serializerOptions) {
		if(data == null) {
			return null;
		}

		var typeName = data["__typename"]!.GetValue<string>()!;
		return typeName switch {
			"InventoryBook" => (IGetBooksData_Books_InventoryBook)new GetBooksData_Books_InventoryBook(data, serializerOptions),
			"RemoteBook" => (IGetBooksData_Books_RemoteBook)new GetBooksData_Books_RemoteBook(data, serializerOptions),
			_ => throw new ArgumentException($"Cant find implementation for {typeName}")
		};
	}
}

public interface IGetBooksData_Books : ITitleFragment {
}

public interface ITitleFragment {
	string Title { get; }
}

public interface ITitleFragment_InventoryBook : ITitleFragment {
	decimal CalculatedPrice { get; }
	ITitleFragment_InventoryBook_Editions[] Editions { get; }
}

public interface ITitleFragment_InventoryBook_Editions {
	string Name { get; }
	DateTimeOffset Released { get; }
}

public class TitleFragment_InventoryBook_Editions : ITitleFragment_InventoryBook_Editions {
	public string Name { get; }
	public DateTimeOffset Released { get; }

	public TitleFragment_InventoryBook_Editions(JsonNode data, JsonSerializerOptions serializerOptions) {
		Name = CreateName(data["name"], serializerOptions);
		Released = CreateReleased(data["released"], serializerOptions);
	}

	private string CreateName(JsonNode? data, JsonSerializerOptions serializerOptions) {
		return data?.Deserialize<string>(serializerOptions) ?? default;
	}

	private DateTimeOffset CreateReleased(JsonNode? data, JsonSerializerOptions serializerOptions) {
		return data?.Deserialize<DateTimeOffset>(serializerOptions) ?? default;
	}
}

public interface ITitleFragment_RemoteBook : ITitleFragment {
}

public interface IGetBooksData_Books_InventoryBook : IGetBooksData_Books, ITitleFragment_InventoryBook {
}

public class GetBooksData_Books_InventoryBook : IGetBooksData_Books_InventoryBook {
	public decimal CalculatedPrice { get; }
	public string Title { get; }
	public ITitleFragment_InventoryBook_Editions[] Editions { get; }

	public GetBooksData_Books_InventoryBook(JsonNode data, JsonSerializerOptions serializerOptions) {
		CalculatedPrice = CreateCalculatedPrice(data["calculatedPrice"], serializerOptions);
		Title = CreateTitle(data["title"], serializerOptions);
		Editions = (data["editions"] != null ? data["editions"]!.AsArray().Select(x => CreateEditions(x, serializerOptions)).ToArray() : null)!;
	}

	private decimal CreateCalculatedPrice(JsonNode? data, JsonSerializerOptions serializerOptions) {
		return data?.Deserialize<decimal>(serializerOptions) ?? default;
	}

	private string CreateTitle(JsonNode? data, JsonSerializerOptions serializerOptions) {
		return data?.Deserialize<string>(serializerOptions) ?? default;
	}

	private ITitleFragment_InventoryBook_Editions? CreateEditions(JsonNode? data, JsonSerializerOptions serializerOptions) {
		if(data == null)
			return null;
		return new TitleFragment_InventoryBook_Editions(data!, serializerOptions);
	}
}

public interface IGetBooksData_Books_RemoteBook : IGetBooksData_Books, ITitleFragment_RemoteBook {
}

public class GetBooksData_Books_RemoteBook : IGetBooksData_Books_RemoteBook {
	public string Title { get; }

	public GetBooksData_Books_RemoteBook(JsonNode data, JsonSerializerOptions serializerOptions) {
		Title = CreateTitle(data["title"], serializerOptions);
	}

	private string CreateTitle(JsonNode? data, JsonSerializerOptions serializerOptions) {
		return data?.Deserialize<string>(serializerOptions) ?? default;
	}
}

public interface IGetBookResult : IOperationResult<IGetBookData> {
}

public class GetBookResult : IGetBookResult {
	public IEnumerable<IClientError> Errors { get; }
	public IGetBookData Data { get; }

	public GetBookResult(JsonNode? data, JsonSerializerOptions serializerOptions) {
		Errors = data?["errors"]?.Deserialize<IEnumerable<ClientError>>(serializerOptions)?.ToArray() ?? new IClientError[0];
		Data = CreateData(data?["data"], serializerOptions);
	}

	private IGetBookData? CreateData(JsonNode? data, JsonSerializerOptions serializerOptions) {
		if(data == null)
			return null;
		return new GetBookData(data!, serializerOptions);
	}
}


public interface IGetBookData {
}

public class GetBookData : IGetBookData {

	public GetBookData(JsonNode data, JsonSerializerOptions serializerOptions) {
	}
}

public interface IAddBookResult : IOperationResult<IAddBookData> {
}

public class AddBookResult : IAddBookResult {
	public IEnumerable<IClientError> Errors { get; }
	public IAddBookData Data { get; }

	public AddBookResult(JsonNode? data, JsonSerializerOptions serializerOptions) {
		Errors = data?["errors"]?.Deserialize<IEnumerable<ClientError>>(serializerOptions)?.ToArray() ?? new IClientError[0];
		Data = CreateData(data?["data"], serializerOptions);
	}

	private IAddBookData? CreateData(JsonNode? data, JsonSerializerOptions serializerOptions) {
		if(data == null)
			return null;
		return new AddBookData(data!, serializerOptions);
	}
}


public interface IAddBookData {
	IAddBookData_AddBook AddBook { get; }
}

public class AddBookData : IAddBookData {
	public IAddBookData_AddBook AddBook { get; }

	public AddBookData(JsonNode data, JsonSerializerOptions serializerOptions) {
		AddBook = CreateAddBook(data["addBook"], serializerOptions);
	}

	private IAddBookData_AddBook? CreateAddBook(JsonNode? data, JsonSerializerOptions serializerOptions) {
		if(data == null)
			return null;
		return new AddBookData_AddBook(data!, serializerOptions);
	}
}

public interface IAddBookData_AddBook : ITitleFragment_InventoryBook {
	string BookId { get; }
}

public class AddBookData_AddBook : IAddBookData_AddBook {
	public decimal CalculatedPrice { get; }
	public string BookId { get; }
	public string Title { get; }
	public ITitleFragment_InventoryBook_Editions[] Editions { get; }

	public AddBookData_AddBook(JsonNode data, JsonSerializerOptions serializerOptions) {
		CalculatedPrice = CreateCalculatedPrice(data["calculatedPrice"], serializerOptions);
		BookId = CreateBookId(data["bookId"], serializerOptions);
		Title = CreateTitle(data["title"], serializerOptions);
		Editions = (data["editions"] != null ? data["editions"]!.AsArray().Select(x => CreateEditions(x, serializerOptions)).ToArray() : null)!;
	}

	private decimal CreateCalculatedPrice(JsonNode? data, JsonSerializerOptions serializerOptions) {
		return data?.Deserialize<decimal>(serializerOptions) ?? default;
	}

	private string CreateBookId(JsonNode? data, JsonSerializerOptions serializerOptions) {
		return data?.Deserialize<string>(serializerOptions) ?? default;
	}

	private string CreateTitle(JsonNode? data, JsonSerializerOptions serializerOptions) {
		return data?.Deserialize<string>(serializerOptions) ?? default;
	}

	private ITitleFragment_InventoryBook_Editions? CreateEditions(JsonNode? data, JsonSerializerOptions serializerOptions) {
		if(data == null)
			return null;
		return new TitleFragment_InventoryBook_Editions(data!, serializerOptions);
	}
}

public interface IBookUpdatedResult : IOperationResult<IBookUpdatedData> {
}

public class BookUpdatedResult : IBookUpdatedResult {
	public IEnumerable<IClientError> Errors { get; }
	public IBookUpdatedData Data { get; }

	public BookUpdatedResult(JsonNode? data, JsonSerializerOptions serializerOptions) {
		Errors = data?["errors"]?.Deserialize<IEnumerable<ClientError>>(serializerOptions)?.ToArray() ?? new IClientError[0];
		Data = CreateData(data?["data"], serializerOptions);
	}

	private IBookUpdatedData? CreateData(JsonNode? data, JsonSerializerOptions serializerOptions) {
		if(data == null)
			return null;
		return new BookUpdatedData(data!, serializerOptions);
	}
}


public interface IBookUpdatedData {
	IBookUpdatedData_BookUpdated BookUpdated { get; }
}

public class BookUpdatedData : IBookUpdatedData {
	public IBookUpdatedData_BookUpdated BookUpdated { get; }

	public BookUpdatedData(JsonNode data, JsonSerializerOptions serializerOptions) {
		BookUpdated = CreateBookUpdated(data["bookUpdated"], serializerOptions);
	}

	private IBookUpdatedData_BookUpdated? CreateBookUpdated(JsonNode? data, JsonSerializerOptions serializerOptions) {
		if(data == null) {
			return null;
		}

		var typeName = data["__typename"]!.GetValue<string>()!;
		return typeName switch {
			"InventoryBook" => (IBookUpdatedData_BookUpdated_InventoryBook)new BookUpdatedData_BookUpdated_InventoryBook(data, serializerOptions),
			"RemoteBook" => (IBookUpdatedData_BookUpdated_RemoteBook)new BookUpdatedData_BookUpdated_RemoteBook(data, serializerOptions),
			_ => throw new ArgumentException($"Cant find implementation for {typeName}")
		};
	}
}

public interface IBookUpdatedData_BookUpdated {
	string BookId { get; }
	string Title { get; }
}

public interface IBookUpdatedData_BookUpdated_InventoryBook : IBookUpdatedData_BookUpdated {
}

public class BookUpdatedData_BookUpdated_InventoryBook : IBookUpdatedData_BookUpdated_InventoryBook {
	public string BookId { get; }
	public string Title { get; }

	public BookUpdatedData_BookUpdated_InventoryBook(JsonNode data, JsonSerializerOptions serializerOptions) {
		BookId = CreateBookId(data["bookId"], serializerOptions);
		Title = CreateTitle(data["title"], serializerOptions);
	}

	private string CreateBookId(JsonNode? data, JsonSerializerOptions serializerOptions) {
		return data?.Deserialize<string>(serializerOptions) ?? default;
	}

	private string CreateTitle(JsonNode? data, JsonSerializerOptions serializerOptions) {
		return data?.Deserialize<string>(serializerOptions) ?? default;
	}
}

public interface IBookUpdatedData_BookUpdated_RemoteBook : IBookUpdatedData_BookUpdated {
}

public class BookUpdatedData_BookUpdated_RemoteBook : IBookUpdatedData_BookUpdated_RemoteBook {
	public string BookId { get; }
	public string Title { get; }

	public BookUpdatedData_BookUpdated_RemoteBook(JsonNode data, JsonSerializerOptions serializerOptions) {
		BookId = CreateBookId(data["bookId"], serializerOptions);
		Title = CreateTitle(data["title"], serializerOptions);
	}

	private string CreateBookId(JsonNode? data, JsonSerializerOptions serializerOptions) {
		return data?.Deserialize<string>(serializerOptions) ?? default;
	}

	private string CreateTitle(JsonNode? data, JsonSerializerOptions serializerOptions) {
		return data?.Deserialize<string>(serializerOptions) ?? default;
	}
}

public class GraphQLDemoClientConfig {
	public Action<HttpBuilder>? ConfigureHttp { get; set; }
	public Action<WebSocketBuilder>? ConfigureWebSocket { get; set; }
}
