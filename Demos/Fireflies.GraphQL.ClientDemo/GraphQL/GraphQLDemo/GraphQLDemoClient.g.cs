// <auto-generated/>
// <generated-at="2023-04-28T12:55:11.665+00:00"/>
#nullable enable

using System.Text;
using System.Text.Json;
using System.Text.Json.Nodes;

namespace Fireflies.GraphQL.ClientDemo.GraphQL.GraphQLDemo;

public class ClientError : IClientError {
    public string Message { get; }
    public string? Code { get; }
    public IReadOnlyList<object>? Path { get; }
    public IReadOnlyList<Location>? Locations { get; }
    public Exception? Exception { get; }
    public IReadOnlyDictionary<string, object?>? Extensions { get; }
}

public interface IClientError {
    string Message { get; }
    string? Code { get; }
    IReadOnlyList<object>? Path { get; }
    IReadOnlyList<Location>? Locations { get; }
    Exception? Exception { get; }
    IReadOnlyDictionary<string, object?>? Extensions { get; }
}

public readonly struct Location {
    public Location(int line, int column) {
        if(line < 1) {
            throw new ArgumentOutOfRangeException(nameof(line), line, "Line location out of range");
        }

        if(column < 1) {
            throw new ArgumentOutOfRangeException(nameof(column), column, "Column location out of range");
        }

        Line = line;
        Column = column;
    }

    public int Line { get; }

    public int Column { get; }
}


public enum __TypeKind {
	SCALAR,
	OBJECT,
	INTERFACE,
	UNION,
	ENUM,
	INPUT_OBJECT,
	LIST,
	NON_NULL,
}

public enum __DirectiveLocation {
	QUERY,
	MUTATION,
	SUBSCRIPTION,
	FIELD,
	FRAGMENT_DEFINITION,
	FRAGMENT_SPREAD,
	INLINE_FRAGMENT,
	VARIABLE_DEFINITION,
	SCHEMA,
	SCALAR,
	OBJECT,
	FIELD_DEFINITION,
	ARGUMENT_DEFINITION,
	INTERFACE,
	UNION,
	ENUM,
	ENUM_VALUE,
	INPUT_OBJECT,
	INPUT_FIELD_DEFINITION,
}

public class BookFilterInput {
	public string? Title { get; set; }
	public BookFilterInput ISBN { get; set; }
}

public class StringFilterOperatorInput {
	public string? Eq { get; set; }
}

public class IBookWhere {
	public IBookWhere BookId { get; set; }
	public IBookWhere Title { get; set; }
	public IBookWhere ISBN { get; set; }
}

public class IntWhere {
	public int? GreaterThan { get; set; }
	public int? GreaterThanOrEq { get; set; }
	public int? LessThan { get; set; }
	public int? LessThanOrEq { get; set; }
	public int? Equal { get; set; }
	public int? NotEqual { get; set; }
}

public class StringWhere {
	public string? Contains { get; set; }
	public string? DoesntContain { get; set; }
	public string? StartsWith { get; set; }
	public string? DoesntStartWith { get; set; }
	public string? EndsWith { get; set; }
	public string? DoesntEndWith { get; set; }
	public string? Equal { get; set; }
	public string? NotEqual { get; set; }
}

public class IBookSort {
	public SortOrder? BookId { get; set; }
	public SortOrder? Title { get; set; }
	public SortOrder? ISBN { get; set; }
}

public enum SortOrder {
	ASC,
	DESC,
}

public class EditionSort {
	public SortOrder? Name { get; set; }
	public SortOrder? Released { get; set; }
}

public class AddBookInput {
	public string? Title { get; set; }
}

public class GraphQLDemoClient {
	private Uri _uri;
	private static readonly HttpClient Client = new();

	public GraphQLDemoClient(Uri uri) {
		_uri = uri;
	}

	private async Task<JsonNode> Execute(JsonObject request) {
		var content = new StringContent(request.ToJsonString(), Encoding.UTF8, "text/text");
		var result = await Client.PostAsync(_uri, content);
		result.EnsureSuccessStatusCode();
		return JsonNode.Parse(await result.Content.ReadAsStreamAsync().ConfigureAwait(false))!;
	}

	public async Task<IMyBasicQueryResult> MyBasicQuery(int bookId, string? otherId	) {
		var request = new JsonObject();
		request["query"] = @"query MyBasicQuery($bookId: Int!, $otherId: String) {
  books(filter: {}) {
    bookId
    iSBN
    ...TitleFragment
    __typename
  }
}
fragment TitleFragment on IBook {
  title
  ... on InventoryBook {
    calculatePrice
    editions {
      name
      released
      __typename
    }
  }
  ...TestFragment
}
fragment TestFragment on RemoteBook {
  test
}";

		var variables = new JsonObject();
		request["variables"] = variables;
		variables["bookId"] = bookId;
		variables["otherId"] = otherId;

		var json = await Execute(request);
		return new MyBasicQueryResult(json["errors"], json["data"]);
	}
}

public interface ITitleFragment {
	string? Title { get; }
}

public interface ITitleFragment_InventoryBook : ITitleFragment {
	decimal CalculatePrice { get; }
	IEnumerable<ITitleFragment_InventoryBook_Editions> Editions { get; }
}

public interface ITitleFragment_InventoryBook_Editions {
	string Name { get; }
	DateTimeOffset Released { get; }
}

public class TitleFragment_InventoryBook_Editions : ITitleFragment_InventoryBook_Editions {
	public string Name { get; }
	public DateTimeOffset Released { get; }

	public TitleFragment_InventoryBook_Editions(JsonNode data) {
		Name = data["name"]?.GetValue<string>() ?? default(string)!;
		Released = data["released"]?.GetValue<DateTimeOffset>() ?? default(DateTimeOffset)!;
	}
}

public interface ITitleFragment_RemoteBook : ITitleFragment, ITestFragment {
}

public interface ITestFragment {
	decimal? Test { get; }
}

public interface IMyBasicQueryResult {
	IEnumerable<IMyBasicQueryResult_Books> Books { get; }
}

public class MyBasicQueryResult : IMyBasicQueryResult {
	public IEnumerable<IClientError> Errors { get; }
	public IEnumerable<IMyBasicQueryResult_Books> Books { get; }

	public MyBasicQueryResult(JsonNode? errors, JsonNode? data) {
		Errors = errors?.Deserialize<IEnumerable<ClientError>>()?.ToArray() ?? new IClientError[0];
		Books = (data?["books"] != null ? data["books"]!.AsArray().Select(x => CreateBooks(x)).ToArray() : null)!;
	}

	private IMyBasicQueryResult_Books? CreateBooks(JsonNode? data) {
		if(data == null) {
			return null;
		}

		var typeName = data["__typename"]!.GetValue<string>()!;
		return typeName switch {
			"InventoryBook" => (IMyBasicQueryResult_Books_InventoryBook)new MyBasicQueryResult_Books_InventoryBook(data),
			"RemoteBook" => (IMyBasicQueryResult_Books_RemoteBook)new MyBasicQueryResult_Books_RemoteBook(data),
			_ => throw new ArgumentException($"Cant find implementation for {typeName}")
		};
	}
}


public interface IMyBasicQueryResult_Books : ITitleFragment {
	string BookId { get; }
	string ISBN { get; }
}

public interface IMyBasicQueryResult_Books_InventoryBook : IMyBasicQueryResult_Books, ITitleFragment_InventoryBook {
}

public class MyBasicQueryResult_Books_InventoryBook : IMyBasicQueryResult_Books_InventoryBook {
	public decimal CalculatePrice { get; }
	public string BookId { get; }
	public string Title { get; }
	public string ISBN { get; }
	public IEnumerable<ITitleFragment_InventoryBook_Editions> Editions { get; }

	public MyBasicQueryResult_Books_InventoryBook(JsonNode data) {
		CalculatePrice = data["calculatePrice"]?.GetValue<decimal>() ?? default(decimal)!;
		BookId = data["bookId"]?.GetValue<string>() ?? default(string)!;
		Title = data["title"]?.GetValue<string>() ?? default(string)!;
		ISBN = data["iSBN"]?.GetValue<string>() ?? default(string)!;
		Editions = (data["editions"] != null ? data["editions"]!.AsArray().Select(x => CreateEditions(x)).ToArray() : null)!;
	}

	private ITitleFragment_InventoryBook_Editions? CreateEditions(JsonNode? data) {
		if(data == null) {
			return null;
		}

		return new TitleFragment_InventoryBook_Editions(data!);
	}
}

public interface IMyBasicQueryResult_Books_RemoteBook : IMyBasicQueryResult_Books, ITitleFragment_RemoteBook, ITestFragment {
}

public class MyBasicQueryResult_Books_RemoteBook : IMyBasicQueryResult_Books_RemoteBook {
	public string BookId { get; }
	public string Title { get; }
	public string ISBN { get; }
	public decimal? Test { get; }

	public MyBasicQueryResult_Books_RemoteBook(JsonNode data) {
		BookId = data["bookId"]?.GetValue<string>() ?? default(string)!;
		Title = data["title"]?.GetValue<string>() ?? default(string)!;
		ISBN = data["iSBN"]?.GetValue<string>() ?? default(string)!;
		Test = data["test"]?.GetValue<decimal?>() ?? default(decimal?)!;
	}
}
